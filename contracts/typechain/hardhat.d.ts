/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DEX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DEX__factory>;
    getContractFactory(
      name: "IDEX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDEX__factory>;
    getContractFactory(
      name: "EVMAccounts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EVMAccounts__factory>;
    getContractFactory(
      name: "IEVMAccounts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEVMAccounts__factory>;
    getContractFactory(
      name: "EVM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EVM__factory>;
    getContractFactory(
      name: "IEVM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEVM__factory>;
    getContractFactory(
      name: "Homa",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Homa__factory>;
    getContractFactory(
      name: "IHoma",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHoma__factory>;
    getContractFactory(
      name: "Honzon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Honzon__factory>;
    getContractFactory(
      name: "IHonzon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHonzon__factory>;
    getContractFactory(
      name: "Incentives",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Incentives__factory>;
    getContractFactory(
      name: "InterfaceIncentives",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceIncentives__factory>;
    getContractFactory(
      name: "NFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFT__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "Oracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Oracle__factory>;
    getContractFactory(
      name: "ISchedule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISchedule__factory>;
    getContractFactory(
      name: "Schedule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Schedule__factory>;
    getContractFactory(
      name: "IStableAsset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableAsset__factory>;
    getContractFactory(
      name: "StableAsset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableAsset__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "ADDRESS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ADDRESS__factory>;
    getContractFactory(
      name: "ADDRESS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ADDRESS__factory>;
    getContractFactory(
      name: "ADDRESS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ADDRESS__factory>;
    getContractFactory(
      name: "IXtokens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IXtokens__factory>;
    getContractFactory(
      name: "Xtokens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Xtokens__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "DEX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DEX>;
    getContractAt(
      name: "IDEX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDEX>;
    getContractAt(
      name: "EVMAccounts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EVMAccounts>;
    getContractAt(
      name: "IEVMAccounts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEVMAccounts>;
    getContractAt(
      name: "EVM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EVM>;
    getContractAt(
      name: "IEVM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEVM>;
    getContractAt(
      name: "Homa",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Homa>;
    getContractAt(
      name: "IHoma",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHoma>;
    getContractAt(
      name: "Honzon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Honzon>;
    getContractAt(
      name: "IHonzon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHonzon>;
    getContractAt(
      name: "Incentives",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Incentives>;
    getContractAt(
      name: "InterfaceIncentives",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceIncentives>;
    getContractAt(
      name: "NFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFT>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "Oracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Oracle>;
    getContractAt(
      name: "ISchedule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISchedule>;
    getContractAt(
      name: "Schedule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Schedule>;
    getContractAt(
      name: "IStableAsset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableAsset>;
    getContractAt(
      name: "StableAsset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StableAsset>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "ADDRESS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ADDRESS>;
    getContractAt(
      name: "ADDRESS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ADDRESS>;
    getContractAt(
      name: "ADDRESS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ADDRESS>;
    getContractAt(
      name: "IXtokens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IXtokens>;
    getContractAt(
      name: "Xtokens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Xtokens>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
