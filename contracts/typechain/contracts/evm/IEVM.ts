/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IEVMInterface extends utils.Interface {
  functions: {
    "developerDeposit()": FunctionFragment;
    "developerDisable()": FunctionFragment;
    "developerEnable()": FunctionFragment;
    "developerStatus(address)": FunctionFragment;
    "maintainerOf(address)": FunctionFragment;
    "newContractExtraBytes()": FunctionFragment;
    "publicationFee()": FunctionFragment;
    "publishContract(address)": FunctionFragment;
    "storageDepositPerByte()": FunctionFragment;
    "transferMaintainer(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "developerDeposit"
      | "developerDisable"
      | "developerEnable"
      | "developerStatus"
      | "maintainerOf"
      | "newContractExtraBytes"
      | "publicationFee"
      | "publishContract"
      | "storageDepositPerByte"
      | "transferMaintainer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "developerDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developerDisable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developerEnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "developerStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maintainerOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newContractExtraBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "storageDepositPerByte",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferMaintainer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "developerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developerDisable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developerEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "developerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintainerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newContractExtraBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storageDepositPerByte",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMaintainer",
    data: BytesLike
  ): Result;

  events: {
    "ContractPublished(address)": EventFragment;
    "DeveloperDisabled(address)": EventFragment;
    "DeveloperEnabled(address)": EventFragment;
    "TransferredMaintainer(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractPublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeveloperDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeveloperEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferredMaintainer"): EventFragment;
}

export interface ContractPublishedEventObject {
  contractAddress: string;
}
export type ContractPublishedEvent = TypedEvent<
  [string],
  ContractPublishedEventObject
>;

export type ContractPublishedEventFilter =
  TypedEventFilter<ContractPublishedEvent>;

export interface DeveloperDisabledEventObject {
  accountAddress: string;
}
export type DeveloperDisabledEvent = TypedEvent<
  [string],
  DeveloperDisabledEventObject
>;

export type DeveloperDisabledEventFilter =
  TypedEventFilter<DeveloperDisabledEvent>;

export interface DeveloperEnabledEventObject {
  accountAddress: string;
}
export type DeveloperEnabledEvent = TypedEvent<
  [string],
  DeveloperEnabledEventObject
>;

export type DeveloperEnabledEventFilter =
  TypedEventFilter<DeveloperEnabledEvent>;

export interface TransferredMaintainerEventObject {
  contractAddress: string;
  newMaintainer: string;
}
export type TransferredMaintainerEvent = TypedEvent<
  [string, string],
  TransferredMaintainerEventObject
>;

export type TransferredMaintainerEventFilter =
  TypedEventFilter<TransferredMaintainerEvent>;

export interface IEVM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEVMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    developerDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    developerDisable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    developerEnable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    developerStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maintainerOf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    newContractExtraBytes(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    publishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storageDepositPerByte(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferMaintainer(
      contractAddress: PromiseOrValue<string>,
      newMaintainer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  developerDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  developerDisable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  developerEnable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  developerStatus(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maintainerOf(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  newContractExtraBytes(overrides?: CallOverrides): Promise<BigNumber>;

  publicationFee(overrides?: CallOverrides): Promise<BigNumber>;

  publishContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storageDepositPerByte(overrides?: CallOverrides): Promise<BigNumber>;

  transferMaintainer(
    contractAddress: PromiseOrValue<string>,
    newMaintainer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    developerDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    developerDisable(overrides?: CallOverrides): Promise<boolean>;

    developerEnable(overrides?: CallOverrides): Promise<boolean>;

    developerStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maintainerOf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    newContractExtraBytes(overrides?: CallOverrides): Promise<BigNumber>;

    publicationFee(overrides?: CallOverrides): Promise<BigNumber>;

    publishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    storageDepositPerByte(overrides?: CallOverrides): Promise<BigNumber>;

    transferMaintainer(
      contractAddress: PromiseOrValue<string>,
      newMaintainer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ContractPublished(address)"(
      contractAddress?: PromiseOrValue<string> | null
    ): ContractPublishedEventFilter;
    ContractPublished(
      contractAddress?: PromiseOrValue<string> | null
    ): ContractPublishedEventFilter;

    "DeveloperDisabled(address)"(
      accountAddress?: PromiseOrValue<string> | null
    ): DeveloperDisabledEventFilter;
    DeveloperDisabled(
      accountAddress?: PromiseOrValue<string> | null
    ): DeveloperDisabledEventFilter;

    "DeveloperEnabled(address)"(
      accountAddress?: PromiseOrValue<string> | null
    ): DeveloperEnabledEventFilter;
    DeveloperEnabled(
      accountAddress?: PromiseOrValue<string> | null
    ): DeveloperEnabledEventFilter;

    "TransferredMaintainer(address,address)"(
      contractAddress?: PromiseOrValue<string> | null,
      newMaintainer?: PromiseOrValue<string> | null
    ): TransferredMaintainerEventFilter;
    TransferredMaintainer(
      contractAddress?: PromiseOrValue<string> | null,
      newMaintainer?: PromiseOrValue<string> | null
    ): TransferredMaintainerEventFilter;
  };

  estimateGas: {
    developerDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    developerDisable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    developerEnable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    developerStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maintainerOf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newContractExtraBytes(overrides?: CallOverrides): Promise<BigNumber>;

    publicationFee(overrides?: CallOverrides): Promise<BigNumber>;

    publishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storageDepositPerByte(overrides?: CallOverrides): Promise<BigNumber>;

    transferMaintainer(
      contractAddress: PromiseOrValue<string>,
      newMaintainer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    developerDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developerDisable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    developerEnable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    developerStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maintainerOf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newContractExtraBytes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storageDepositPerByte(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMaintainer(
      contractAddress: PromiseOrValue<string>,
      newMaintainer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
