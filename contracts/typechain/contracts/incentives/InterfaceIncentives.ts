/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface InterfaceIncentivesInterface extends utils.Interface {
  functions: {
    "claimRewards(uint8,address)": FunctionFragment;
    "depositDexShare(address,uint256)": FunctionFragment;
    "getClaimRewardDeductionRate(uint8,address)": FunctionFragment;
    "getIncentiveRewardAmount(uint8,address,address)": FunctionFragment;
    "getPendingRewards(address[],uint8,address,address)": FunctionFragment;
    "withdrawDexShare(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "depositDexShare"
      | "getClaimRewardDeductionRate"
      | "getIncentiveRewardAmount"
      | "getPendingRewards"
      | "withdrawDexShare"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDexShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimRewardDeductionRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentiveRewardAmount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDexShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositDexShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimRewardDeductionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentiveRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDexShare",
    data: BytesLike
  ): Result;

  events: {
    "ClaimedRewards(address,uint8,address)": EventFragment;
    "DepositedShare(address,address,uint256)": EventFragment;
    "WithdrewShare(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedShare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewShare"): EventFragment;
}

export interface ClaimedRewardsEventObject {
  sender: string;
  pool: number;
  poolCurrencyId: string;
}
export type ClaimedRewardsEvent = TypedEvent<
  [string, number, string],
  ClaimedRewardsEventObject
>;

export type ClaimedRewardsEventFilter = TypedEventFilter<ClaimedRewardsEvent>;

export interface DepositedShareEventObject {
  sender: string;
  currencyId: string;
  amount: BigNumber;
}
export type DepositedShareEvent = TypedEvent<
  [string, string, BigNumber],
  DepositedShareEventObject
>;

export type DepositedShareEventFilter = TypedEventFilter<DepositedShareEvent>;

export interface WithdrewShareEventObject {
  sender: string;
  currencyId: string;
  amount: BigNumber;
}
export type WithdrewShareEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrewShareEventObject
>;

export type WithdrewShareEventFilter = TypedEventFilter<WithdrewShareEvent>;

export interface InterfaceIncentives extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InterfaceIncentivesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositDexShare(
      currencyId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimRewardDeductionRate(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIncentiveRewardAmount(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      rewardCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingRewards(
      currencyIds: PromiseOrValue<string>[],
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    withdrawDexShare(
      currencyId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    pool: PromiseOrValue<BigNumberish>,
    poolCurrencyId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositDexShare(
    currencyId: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimRewardDeductionRate(
    pool: PromiseOrValue<BigNumberish>,
    poolCurrencyId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIncentiveRewardAmount(
    pool: PromiseOrValue<BigNumberish>,
    poolCurrencyId: PromiseOrValue<string>,
    rewardCurrencyId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRewards(
    currencyIds: PromiseOrValue<string>[],
    pool: PromiseOrValue<BigNumberish>,
    poolCurrencyId: PromiseOrValue<string>,
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  withdrawDexShare(
    currencyId: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositDexShare(
      currencyId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getClaimRewardDeductionRate(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncentiveRewardAmount(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      rewardCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewards(
      currencyIds: PromiseOrValue<string>[],
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    withdrawDexShare(
      currencyId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClaimedRewards(address,uint8,address)"(
      sender?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      poolCurrencyId?: PromiseOrValue<string> | null
    ): ClaimedRewardsEventFilter;
    ClaimedRewards(
      sender?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      poolCurrencyId?: PromiseOrValue<string> | null
    ): ClaimedRewardsEventFilter;

    "DepositedShare(address,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      currencyId?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositedShareEventFilter;
    DepositedShare(
      sender?: PromiseOrValue<string> | null,
      currencyId?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositedShareEventFilter;

    "WithdrewShare(address,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      currencyId?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrewShareEventFilter;
    WithdrewShare(
      sender?: PromiseOrValue<string> | null,
      currencyId?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrewShareEventFilter;
  };

  estimateGas: {
    claimRewards(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositDexShare(
      currencyId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimRewardDeductionRate(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncentiveRewardAmount(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      rewardCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewards(
      currencyIds: PromiseOrValue<string>[],
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawDexShare(
      currencyId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositDexShare(
      currencyId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimRewardDeductionRate(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncentiveRewardAmount(
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      rewardCurrencyId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewards(
      currencyIds: PromiseOrValue<string>[],
      pool: PromiseOrValue<BigNumberish>,
      poolCurrencyId: PromiseOrValue<string>,
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawDexShare(
      currencyId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
