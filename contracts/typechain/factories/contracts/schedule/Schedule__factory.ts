/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Schedule,
  ScheduleInterface,
} from "../../../contracts/schedule/Schedule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "taskId",
        type: "bytes",
      },
    ],
    name: "CanceledCall",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "taskId",
        type: "bytes",
      },
    ],
    name: "RescheduledCall",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "taskId",
        type: "bytes",
      },
    ],
    name: "ScheduledCall",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "taskId",
        type: "bytes",
      },
    ],
    name: "cancelCall",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minDelay",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "taskId",
        type: "bytes",
      },
    ],
    name: "rescheduleCall",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "storageLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minDelay",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "inputData",
        type: "bytes",
      },
    ],
    name: "scheduleCall",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a50806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063168d560d1461004657806380770aa21461006f578063ed67982b14610092575b600080fd5b61005961005436600461072b565b6100a5565b6040516100669190610827565b60405180910390f35b61008261007d366004610841565b610352565b6040519015158152602001610066565b6100826100a0366004610888565b6104b3565b606073ffffffffffffffffffffffffffffffffffffffff871661014f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f5363686564756c6543616c6c3a2074686520636f6e747261637441646472657360448201527f7320697320746865207a65726f2061646472657373000000000000000000000060648201526084015b60405180910390fd5b60008251116101ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5363686564756c6543616c6c3a20696e707574206973206e756c6c00000000006044820152606401610146565b60008061040473ffffffffffffffffffffffffffffffffffffffff16338a8a8a8a8a8a6040516024016101f397969594939291906108c5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f64c9190500000000000000000000000000000000000000000000000000000000179052516102749190610923565b6000604051808303816000865af19150503d80600081146102b1576040519150601f19603f3d011682016040523d82523d6000602084013e6102b6565b606091505b509092509050816102c8573d60208201fd5b6000818060200190518101906102de919061093f565b90508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff50ab0aa329811f23150e5490fc00ea0baf136a55280b7e88703b4753d4097ce8360405161033d9190610827565b60405180910390a39998505050505050505050565b600080600061040473ffffffffffffffffffffffffffffffffffffffff16338686604051602401610385939291906109b6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f28302f3400000000000000000000000000000000000000000000000000000000179052516104069190610923565b6000604051808303816000865af19150503d8060008114610443576040519150601f19603f3d011682016040523d82523d6000602084013e610448565b606091505b5090925090508161045a573d60208201fd5b3373ffffffffffffffffffffffffffffffffffffffff167f3d7c2a1f4334df8f13c937065d5a5505918af3e28136cf2ac1273b96d1ed996a856040516104a09190610827565b60405180910390a2506001949350505050565b600080600061040473ffffffffffffffffffffffffffffffffffffffff1633856040516024016104e49291906109eb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f93e3266100000000000000000000000000000000000000000000000000000000179052516105659190610923565b6000604051808303816000865af19150503d80600081146105a2576040519150601f19603f3d011682016040523d82523d6000602084013e6105a7565b606091505b509092509050816105b9573d60208201fd5b3373ffffffffffffffffffffffffffffffffffffffff167fe53347c2cd79d58390b73e62c658e8893996a9f82a3be212c9971859c79a9644856040516105ff9190610827565b60405180910390a25060019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561068757610687610611565b604052919050565b600067ffffffffffffffff8211156106a9576106a9610611565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126106e657600080fd5b81356106f96106f48261068f565b610640565b81815284602083860101111561070e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561074457600080fd5b863573ffffffffffffffffffffffffffffffffffffffff8116811461076857600080fd5b95506020870135945060408701359350606087013592506080870135915060a087013567ffffffffffffffff8111156107a057600080fd5b6107ac89828a016106d5565b9150509295509295509295565b60005b838110156107d45781810151838201526020016107bc565b50506000910152565b600081518084526107f58160208601602086016107b9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061083a60208301846107dd565b9392505050565b6000806040838503121561085457600080fd5b82359150602083013567ffffffffffffffff81111561087257600080fd5b61087e858286016106d5565b9150509250929050565b60006020828403121561089a57600080fd5b813567ffffffffffffffff8111156108b157600080fd5b6108bd848285016106d5565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff808a1683528089166020840152508660408301528560608301528460808301528360a083015260e060c083015261091660e08301846107dd565b9998505050505050505050565b600082516109358184602087016107b9565b9190910192915050565b60006020828403121561095157600080fd5b815167ffffffffffffffff81111561096857600080fd5b8201601f8101841361097957600080fd5b80516109876106f48261068f565b81815285602083850101111561099c57600080fd5b6109ad8260208301602086016107b9565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff841681528260208201526060604082015260006109ad60608301846107dd565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006108bd60408301846107dd56fea26469706673582212208e95d3ae48002cb89cea3d0668b8c3483617d3b441d81eb152d3e5b3a573e80964736f6c63430008120033";

type ScheduleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ScheduleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Schedule__factory extends ContractFactory {
  constructor(...args: ScheduleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Schedule> {
    return super.deploy(overrides || {}) as Promise<Schedule>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Schedule {
    return super.attach(address) as Schedule;
  }
  override connect(signer: Signer): Schedule__factory {
    return super.connect(signer) as Schedule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ScheduleInterface {
    return new utils.Interface(_abi) as ScheduleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Schedule {
    return new Contract(address, _abi, signerOrProvider) as Schedule;
  }
}
