/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EVMAccounts,
  EVMAccountsInterface,
} from "../../../contracts/evm-accounts/EVMAccounts";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "accountId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "evmAddress",
        type: "address",
      },
    ],
    name: "ClaimAccount",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "accountId",
        type: "bytes32",
      },
    ],
    name: "claimDefaultEvmAddress",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "evmAddress",
        type: "address",
      },
    ],
    name: "getAccountId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "accountId",
        type: "bytes32",
      },
    ],
    name: "getEvmAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610567806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630232027e14610046578063be4327a614610083578063e0b490f7146100a6575b600080fd5b61005961005436600461046a565b6100c7565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61009661009136600461046a565b6101e7565b604051901515815260200161007a565b6100b96100b43660046104a8565b610356565b60405190815260200161007a565b600080600061040873ffffffffffffffffffffffffffffffffffffffff16846040516024016100f891815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0232027e000000000000000000000000000000000000000000000000000000001790525161017991906104cc565b600060405180830381855afa9150503d80600081146101b4576040519150601f19603f3d011682016040523d82523d6000602084013e6101b9565b606091505b509092509050816101cb573d60208201fd5b808060200190518101906101df91906104fb565b949350505050565b600080600061040873ffffffffffffffffffffffffffffffffffffffff168460405160240161021891815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fbe4327a6000000000000000000000000000000000000000000000000000000001790525161029991906104cc565b6000604051808303816000865af19150503d80600081146102d6576040519150601f19603f3d011682016040523d82523d6000602084013e6102db565b606091505b509092509050816102ed573d60208201fd5b60008180602001905181019061030391906104fb565b60405190915073ffffffffffffffffffffffffffffffffffffffff821690869033907f2ae242ec459687025a9f80d4692a6e5c63f28e96bbdfda97720b72d87e3b459490600090a4506001949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff821660248201526000908190819061040890604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe0b490f7000000000000000000000000000000000000000000000000000000001790525161040491906104cc565b600060405180830381855afa9150503d806000811461043f576040519150601f19603f3d011682016040523d82523d6000602084013e610444565b606091505b50909250905081610456573d60208201fd5b808060200190518101906101df9190610518565b60006020828403121561047c57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146104a557600080fd5b50565b6000602082840312156104ba57600080fd5b81356104c581610483565b9392505050565b6000825160005b818110156104ed57602081860181015185830152016104d3565b506000920191825250919050565b60006020828403121561050d57600080fd5b81516104c581610483565b60006020828403121561052a57600080fd5b505191905056fea2646970667358221220bd21e8c8b570932901c002c0d64a86d7d3bfb5657e7805a3b0748d3ad46ad42464736f6c63430008120033";

type EVMAccountsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EVMAccountsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EVMAccounts__factory extends ContractFactory {
  constructor(...args: EVMAccountsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EVMAccounts> {
    return super.deploy(overrides || {}) as Promise<EVMAccounts>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EVMAccounts {
    return super.attach(address) as EVMAccounts;
  }
  override connect(signer: Signer): EVMAccounts__factory {
    return super.connect(signer) as EVMAccounts__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EVMAccountsInterface {
    return new utils.Interface(_abi) as EVMAccountsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EVMAccounts {
    return new Contract(address, _abi, signerOrProvider) as EVMAccounts;
  }
}
